{"version":3,"sources":["App.jsx","index.js"],"names":["App","useState","data","getRandString","ch","result","j","charAt","Math","floor","random","length","now","Date","end_date","i","push","toLocaleString","min","max","keys","fillTestData","obj","setObj","signIsPlus","setSign","onFormatDate","str","newString","split","year","month","date","time","border","map","elem","index","key","onClick","sortText","sort","a","b","onSort","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LA2HeA,EAzHH,WAAO,IAAD,EACQC,mBAGtB,WAeI,IAdA,IACIC,EAAO,GAGPC,EAAgB,WAGhB,IAFA,IAAIC,EAAK,iEACLC,EAAS,GACJC,EAAI,EAAGA,EAAI,GAAIA,IACpBD,GAAUD,EAAGG,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,EAAGO,SAEtD,OAAON,GAEPO,EAAMC,KAAKD,MACXE,EAAWF,EAAO,QACbG,EAAI,EAAGA,EAAI,GAAIA,IACpBb,EAAKc,KACD,CAba,IAAIH,KAAKL,KAAKC,MAAMG,EAAMJ,KAAKE,UAAYI,EAAWF,KAAOK,kBADnEC,EAgBK,KAhBAC,EAgBM,MAhBEX,KAAKC,MAAMD,KAAKE,UAAYS,EAAMD,IAAQA,GAiB1Df,MAjBE,IAACe,EAAKC,EAqBpB,MAAO,CACHC,KAxBO,CAAC,OAAQ,SAAU,UAyB1BlB,KAAMA,GA7BiBmB,IADjB,mBACPC,EADO,KACFC,EADE,OAEgBtB,oBAAS,GAFzB,mBAEPuB,EAFO,KAEKC,EAFL,KAkCd,IA6CMC,EAAe,SAACC,GAClB,IAAIC,EAAYD,EAAIE,MAAM,MAEtBC,EAAOF,EAAU,GAAGC,MAAM,KAAK,GAC/BE,EAAQH,EAAU,GAAGC,MAAM,KAAK,GAChCG,EAAOJ,EAAU,GAAGC,MAAM,KAAK,GAC/BI,EAAON,EAAIE,MAAM,MAAM,GAE3B,MAAM,GAAN,OAAUC,EAAV,YAAkBC,EAAlB,YAA2BC,EAA3B,YAAmCC,IAGvC,OACI,2BAAOC,OAAO,KACV,+BACI,4BACKZ,EAAIF,KAAKe,KAAI,SAACC,EAAMC,GACjB,OACI,wBACIC,IAAKD,EACLE,QAAS,kBAhEtB,SAACC,GACZ,IAAInC,EACJ,OAAQmC,GACJ,IAAK,OAEKnC,GADS,IAAfmB,EACeF,EAAIpB,KAAKuC,MAAK,SAACC,EAAGC,GACzB,OAAO,IAAI9B,KAAK,IAAIA,KAAKa,EAAaiB,EAAE,MAAQ,IAAI9B,KAAKa,EAAagB,EAAE,QAEjEpB,EAAIpB,KAAKuC,MAAK,SAACC,EAAGC,GACzB,OAAO,IAAI9B,KAAK,IAAIA,KAAKa,EAAagB,EAAE,MAAQ,IAAI7B,KAAKa,EAAaiB,EAAE,QAEhF,MACJ,IAAK,SAEKtC,GADS,IAAfmB,EACeF,EAAIpB,KAAKuC,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE,GAAKD,EAAE,MACjCpB,EAAIpB,KAAKuC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE,GAAKC,EAAE,MAChD,MACJ,IAAK,SAkBKtC,GADS,IAAfmB,EACeF,EAAIpB,KAAKuC,MAjBxB,SAAwBC,EAAGC,GACvB,OAAID,EAAE,GAAKC,EAAE,IACD,EACRD,EAAE,GAAKC,EAAE,GACF,EACJ,KAaIrB,EAAIpB,KAAKuC,MAVxB,SAAuBC,EAAGC,GACtB,OAAID,EAAE,GAAKC,EAAE,IACD,EACRD,EAAE,GAAKC,EAAE,GACF,EACJ,KAMX,MACJ,QACI,OAERpB,EAAO,2BAAKD,GAAN,IAAWjB,YACjBoB,GAASD,GAsB8BoB,CAAOR,KAErBA,QAMrB,+BACKd,EAAIpB,KAAKiC,KAAI,SAACC,EAAMC,GACjB,OACI,wBAAIC,IAAKD,GACL,4BAAKD,EAAK,IACV,4BAAKA,EAAK,IACV,4BAAKA,EAAK,WC7GtCS,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.a5be9ccd.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst App = () => {\n    const [obj, setObj] = useState(fillTestData())\n    const [signIsPlus, setSign] = useState(true)\n\n    function fillTestData() {\n        let keys = ['date', 'number', 'string'];\n        let data = [];\n        let getRand = (min, max) => Math.floor(Math.random() * (max - min)) + min;\n        let randDate = () => new Date(Math.floor(now + Math.random() * (end_date - now))).toLocaleString();\n        let getRandString = function () {\n            let ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            let result = \"\";\n            for (let j = 0; j < 10; j++) {\n                result += ch.charAt(Math.floor(Math.random() * ch.length));\n            }\n            return result;\n        };\n        let now = Date.now();\n        let end_date = now + (86400000 * 365 * 2);\n        for (let i = 0; i < 10; i++) {\n            data.push(\n                [\n                    randDate(),\n                    getRand(1111, 99999),\n                    getRandString()\n                ]\n            );\n        }\n        return {\n            keys: keys,\n            data: data\n        }\n    }\n\n    const onSort = (sortText) => {\n        let result;\n        switch (sortText) {\n            case 'date':\n                signIsPlus === true\n                    ? result = obj.data.sort((a, b) => {\n                        return new Date(new Date(onFormatDate(b[0]))) - new Date(onFormatDate(a[0]))\n                    })\n                    : result = obj.data.sort((a, b) => {\n                        return new Date(new Date(onFormatDate(a[0]))) - new Date(onFormatDate(b[0]))\n                    })\n                break;\n            case 'number':\n                signIsPlus === true\n                    ? result = obj.data.sort((a, b) => b[1] - a[1])\n                    : result = obj.data.sort((a, b) => a[1] - b[1])\n                break;\n            case 'string':\n                function descendingSort(a, b) {\n                    if (a[2] < b[2])\n                        return -1;\n                    if (a[2] > b[2])\n                        return 1;\n                    return 0;\n                }\n\n                function ascendingSort(a, b) {\n                    if (a[2] > b[2])\n                        return -1;\n                    if (a[2] < b[2])\n                        return 1;\n                    return 0;\n                }\n\n                signIsPlus === true\n                    ? result = obj.data.sort(descendingSort)\n                    : result = obj.data.sort(ascendingSort)\n                break;\n            default:\n                return\n        }\n        setObj({ ...obj, result });\n        setSign(!signIsPlus);\n    }\n\n    const onFormatDate = (str) => {\n        let newString = str.split(', ')\n\n        let year = newString[0].split('.')[2]\n        let month = newString[0].split('.')[1]\n        let date = newString[0].split('.')[0]\n        let time = str.split(', ')[1]\n\n        return `${year}-${month}-${date}T${time}`\n    }\n\n    return (\n        <table border=\"1\">\n            <thead>\n                <tr>\n                    {obj.keys.map((elem, index) => {\n                        return (\n                            <th\n                                key={index}\n                                onClick={() => onSort(elem)}\n                            >\n                                {elem}\n                            </th>\n                        )\n                    })}\n                </tr>\n            </thead>\n            <tbody>\n                {obj.data.map((elem, index) => {\n                    return (\n                        <tr key={index}>\n                            <td>{elem[0]}</td>\n                            <td>{elem[1]}</td>\n                            <td>{elem[2]}</td>\n                        </tr>\n                    )\n                })}\n            </tbody>\n        </table>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}